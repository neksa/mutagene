# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    branches:
      ignore:
        - docs
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7.7
        environment:
          PIPENV_VENV_IN_PROJECT: true
    
    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      # https://circleci.com/docs/2.0/caching/#pip-python, https://support.circleci.com/hc/en-us/articles/115015426888-Clear-project-cache
      - restore_cache:
          keys:
          # when lock file changes, use increasingly general patterns to restore cache
          - v0_9-dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v0_9-dependencies-{{ .Branch }}-
          - v0_9-dependencies-

      - run:
          name: Install Python environment dependencies
          command: |
            sudo pip install pipenv
            pipenv install

      - run:
          name: Download files required for CLI tests (if not restored from cache)
          command: |
            [ -f ./hg19.2bit ] || wget -O ./hg19.2bit https://hgdownload.cse.ucsc.edu/goldenPath/hg19/bigZips/hg19.2bit
            [ -f ./cohorts.tar.gz ] || wget -O ./cohorts.tar.gz https://www.ncbi.nlm.nih.gov/research/mutagene/static/data/cohorts.tar.gz
            [ -f ./sample1.maf ] || wget -O ./sample1.maf https://www.ncbi.nlm.nih.gov/research/mutagene/static/data/sample1.maf

      - save_cache:
          key: v0_9-dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            # this path is used due to presence of PIPENV_VENV_IN_PROJECT env var, would normally be in, e.g., ~/.local/share/virtualenvs/mutagene-5WcH_jEW
            - ./.venv
            - ./hg19.2bit
            - ./cohorts.tar.gz
            - ./sample1.maf

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            pipenv run pytest tests

      - run:
          name: verify package
          command: |
            pipenv run python setup.py check

      - run:
          name: install package
          command: |
            pipenv run python setup.py install
            pipenv run mutagene --help > test-reports/mutagene-help.out

      - run:
          name: Execute mutagene fetch
          command: |
            pipenv run mutagene -v fetch cohorts MSKCC --cohort paac_jhu_2014
            FETCH_MD5SUM=$(md5sum paac_jhu_2014.tar.gz | awk '{print $1}')
            [ $FETCH_MD5SUM = 'b7709f55eaeade1b1c6102d134b16c18' ]

      - run:
          name: Execute mutagene motif
          command: |
            pipenv run mutagene -v motif -i sample1.maf -g hg19 --motif "C[A>T]" --strand A -o test-reports/cli-motif-sample1.txt
            MOTIF_SAMPLE=$(awk '{if(NR==2) print $1}' test-reports/cli-motif-sample1.txt)
            [ $MOTIF_SAMPLE = 'TCGA-50-6593-01A-11D-1753-08' ]

      - run:
          name: Execute mutagene profile
          command: |
            pipenv run mutagene -v profile -i sample1.maf -g hg19 -o test-reports/cli-profile-sample1.txt
            PROFILE_SAMPLE=$(awk '{if(NR==1) print $1 $2}' test-reports/cli-profile-sample1.txt)
            [ $PROFILE_SAMPLE = 'A[C>A]A6' ]

      - run:
          name: Execute mutagene rank
          command: |
            pipenv run mutagene -v rank -g hg19 -i sample1.maf -c pancancer -o test-reports/cli-rank-sample1-pancancer.txt
            RANK_GENE_MUT=$(awk '{if(NR==2) print $1 $2}' test-reports/cli-rank-sample1-pancancer.txt)
            [ $RANK_GENE_MUT = 'CPXM2T536M' ]

      - run:
          name: Execute mutagene signature
          command: |
            pipenv run mutagene -v signature identify -i sample1.maf -g hg19 -s5 -o test-reports/cli-signature-sample1.txt
            SIGNATURE_SAMPLE=$(awk '{if(NR==2) print $1 $2 $3 $4}' test-reports/cli-signature-sample1.txt)
            [ $SIGNATURE_SAMPLE = 'TCGA-50-6593-01A-11D-1753-0810.5361182' ]

      - store_artifacts:
          path: test-reports/
          destination: tr1

      - store_test_results:
          path: test-reports/
